# Airflow with PostgreSQL docker-compose.yml
version: '3.8'

x-airflow-common: &airflow-common
  image: apache/airflow:2.7.1
  env_file:
    - .env
  environment:
    # Core configurations
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY:-}
    - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
    - AIRFLOW__CORE__LOAD_EXAMPLES=false
    - AIRFLOW__CORE__DAG_DISCOVERY_SAFE_MODE=false
    
    # Database connection
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    
    # API and security
    - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
    
    # Web server
    - AIRFLOW__WEBSERVER__BASE_URL=http://localhost:8080
    
    # Logging
    - AIRFLOW__LOGGING__LOGGING_LEVEL=INFO
    
    # Email (configure if needed)
    # - AIRFLOW__EMAIL__EMAIL_BACKEND=airflow.utils.email.send_email_smtp
    # - AIRFLOW__EMAIL__SMTP_HOST=smtp.example.com
    # - AIRFLOW__EMAIL__SMTP_STARTTLS=True
    # - AIRFLOW__EMAIL__SMTP_SSL=False
    # - AIRFLOW__EMAIL__SMTP_PORT=587
    # - AIRFLOW__EMAIL__SMTP_USER=user@example.com
    # - AIRFLOW__EMAIL__SMTP_PASSWORD=password
    # - AIRFLOW__EMAIL__SMTP_MAIL_FROM=airflow@example.com
    
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./config:/opt/airflow/config
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    - postgres

services:
  postgres:
    image: postgres:13
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      retries: 5
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: >
      -c '
      function init_db() {
        airflow db upgrade && \
        airflow users create \
          --username airflow \
          --password airflow \
          --firstname Airflow \
          --lastname Admin \
          --role Admin \
          --email airflow@example.com
      }
      # Retry initialization in case Postgres isn\'t ready
      for i in {1..5}; do
        init_db && break || sleep 5
      done
      '
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - airflow-init
    restart: unless-stopped

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      - airflow-init
    restart: unless-stopped

  # Optional - add flower for monitoring
  # airflow-flower:
  #   <<: *airflow-common
  #   command: celery flower
  #   ports:
  #     - "5555:5555"
  #   depends_on:
  #     - airflow-init

volumes:
  postgres-db-volume:

# Networks (optional)
# networks:
#   airflow-network:
#     driver: bridge